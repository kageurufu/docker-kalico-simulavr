

[gcode_macro _DEV_MAX_PRINTER_SPEED_TEST]
gcode:
  G28
  G1 X70 Y70 Z10
  SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
  
  {% for accel in range(500, 2500, 100) %}
    {% for vel in range(9000, 30000, 2500) %}
      SET_VELOCITY_LIMIT ACCEL={accel}

      RESPOND PREFIX="DBG:" MSG="VELOCITY: {vel} ACCEL: {accel}"
      
      G1 X1 Y1 F{vel}
      G1 X139 Y149 F{vel}
      G1 X1 Y1 F{vel}
      G1 X139 Y149 F{vel}

      G1 X70 Y1 F{vel}
      G1 X70 Y149 F{vel}
      G1 X70 Y1 F{vel}
      G1 X70 Y149 F{vel}
      
      #RESPOND MSG="G1 F{vel} ACCEL={accel}"
    {% endfor %}
  {% endfor %}

    
[gcode_macro _LEGACY_BLOCKING_HEATSOAK]
gcode:
  {% set total = params.DURATION_MIN|default(15)|int %}
  {% for boops in range(0, total+1) %}
    M117 "Preheating, {total - boops}m remaining."
    RESPOND TYPE=command MSG="action:preheat_notify MINUTES_ELAPSED={ boops } MINUTES_TOTAL={ total }"
    G4 P60000 #wait 60 seconds.
  
    # Extruder a lil bit of cocoa core to purge as it melts.
    M83
    G1 E.3 F150
  {% endfor %}
  
  RESPOND TYPE=command MSG="action:prompt_begin Preheat Done!"
  RESPOND TYPE=command MSG="action:prompt_text Preheat Done!"
  RESPOND TYPE=command MSG="action:prompt_button OK|RESPOND TYPE=command MSG=action:prompt_end"
  RESPOND TYPE=command MSG="action:prompt_show"

  
[gcode_macro _DOING_LINES]
gcode:
  G90
  G1 Z0.4 F500
  
  {% for x_pos in range(10, 140, 5) %}

    {% if x_pos == 10 %}
    G91
    G1 Z+5 F500
    {% endif %}

    G90
    G1 X{x_pos} Y5 F1200

    _DRAW_FILAMENT_LINE X={x_pos} Y=135 ZHOP_DIST=5
    
  {% endfor %}
  
[gcode_macro _DRAW_FILAMENT_LINE]
gcode:
  G28
  BED_MESH_PROFILE LOAD=default

  #reset extruder to zero after each move so we don't have to think about it, I think?
  G92 E0 

  {% set zhop_dist = params.ZHOP_DIST|default(None)|float %}
  {% if zhop_dist != None %}
    G91
    G1 Z-{zhop_dist} F500 #back off 5mm to move.
    G90
  {% endif %}



  # Input variable parameters, etc.
  {% set start_x = params.START_X|default(printer.gcode_move.position.x)|float %}
  {% set start_y = params.START_Y|default(printer.gcode_move.position.y)|float %}
  {% set end_x = params.X|float %}
  {% set end_y = params.Y|float %}

  {% set temp_x_axis = math.pow(math.fabs(start_x - end_x), 2)|float %}
  {% set temp_y_axis = math.pow(math.fabs(start_y - end_y), 2)|float %}

  # Distance in mm the extruder will move between (x_start, y_start) and (x_end, y_end).
  {% set temp_pythagoras = math.sqrt(temp_x_axis + temp_y_axis)|float %}

  # calculate extrusion volume per mm of extrude.

  {% set nozzle_dia = printer.configfile.settings.extruder.nozzle_diameter %}
  {% set filament_dia = printer.configfile.settings.extruder.filament_diameter %}
  
  {% set nozzle_cross_sectional_area  = math.pi * math.pow((nozzle_dia / 2), 2) %}
  {% set filament_cross_sectional_area  = math.pi * math.pow((filament_dia / 2), 2) %}

  {action_respond_info("filament cross-sectional area: {}mm²".format(filament_cross_sectional_area)) } 
  {action_respond_info("nozzle cross-sectional area: {}mm²".format(nozzle_cross_sectional_area)) } 

  {% set extrusion_ratio_per_mm_of_extruder_movement = (nozzle_cross_sectional_area / filament_cross_sectional_area) %}

  {action_respond_info("extrusion_ratio {}".format(extrusion_ratio_per_mm_of_extruder_movement )) } 

  G1 X{start_x} Y{start_y} F800

  G1 X{end_x} Y{end_y} F{4.5 * 60} E{extrusion_ratio_per_mm_of_extruder_movement * temp_pythagoras}
  #reset extruder to zero after each move so we don't have to think about it, I think?
  G92 E0 

  {% if zhop_dist != None %}
    G91
    G1 Z+{zhop_dist} F500 #back off 5mm to move.
    G90
  {% endif %}

  
    
  
[gcode_macro _SECRET_FLOW_RETRACT_TEST]
gcode:
  PREHEAT_DARK
  G28
  G1 Z.6 F150
  BED_MESH_PROFILE LOAD=default
  
  {% set flowhelp_inset_margin = params.INSET_MARGIN|default(10)|float %}
  # We want to be 10mm away from the edge of the bed at all times.  Yay.

  # We define the range we're testing here, from .2 to .35mm retraction length.  We're testing how well it oozes, or well, doesn't.
  {% set start_retraction_length = params.START_RETR_LENGTH|default(0.2)|float %}
  {% set end_retraction_length = params.END_RETR_LENGTH|default(0.35)|float %}

  # Retraction speeds as dials you can test.
  {% set start_retraction_spd = params.START_RETR_SPEED|default(8)|float %}
  {% set end_retraction_spd = params.END_RETR_SPEED|default(12)|float %}

  # Number of tests to actually perform per side.
  {% set retr_distance_steps = params.RETRACTION_DISTANCE_STEPS|default(4)|int %}
  {% set retr_speed_steps = params.RETRACTION_SPEED_STEPS|default(4)|int %}
  
  {% if printer.configfile.settings.printer.kinematics == 'corexy' %}
    {action_respond_info("Detected kinematics CoreXY, trivial-esque to find motion.")} 
    # X Axis Dimensioning
    {% if 'stepper_x' in printer.configfile.settings %}
      {% set x_size = printer.configfile.settings.stepper_x.position_max|float %}
        {% if 'position_min' in printer.configfile.settings.stepper_x %}
          {% set x_size = x_size - printer.configfile.settings.stepper_x.position_min|float %}
        {% endif %}
      {action_respond_info("Axis X: {} mm size".format(x_size))} 
    {% endif %}

    # Y Axis Dimensioning
    {% if 'stepper_y' in printer.configfile.settings %}
      {% set y_size = printer.configfile.settings.stepper_y.position_max|float %}
        {% if 'position_min' in printer.configfile.settings.stepper_x %}
          {% set y_size = y_size - printer.configfile.settings.stepper_y.position_min|float %}
        {% endif %}
      {action_respond_info("Axis Y: {} mm size".format(y_size))} 
    {% endif %}
    
    # Main execution, yipee.  
    {% set start_corner_x = 0.0 + flowhelp_inset_margin|float %}
    {% set start_corner_y = 0.0 + flowhelp_inset_margin|float %}
    {% set end_corner_x = x_size - flowhelp_inset_margin|float %}
    {% set end_corner_y = y_size - flowhelp_inset_margin|float %}

    {% set usable_x = end_corner_x - start_corner_x %}
    {% set usable_y = end_corner_y - start_corner_y %}

    # The below soup is because python's math library doesn't allow you to use 
    # the range function with a float for the input.  numpy has one, called `arange`
    # but that is unfortunately not a valid option with current Klipper headaches.

    # I sincerely hope this gets changed. -K, 2024/05/21
    
    # retraction speed range.
    
    {% for stepping_y in range(0, (retr_speed_steps*2)+1, 2) %}
    {% set stepping_division_size_y = ((usable_y) / ((retr_speed_steps*2)+1)) %}

      # We will not have an "end Y" for this purpose since we are wiping a range.
      {% set start_retr_y = start_corner_y + (stepping_division_size_y * stepping_y) %} 
      {action_respond_info("Y-Start: {}".format(start_retr_y))} 

      {% for stepping_x in range(0, (retr_distance_steps*2)+1, 2) %}
        {% set stepping_division_size_x = ((usable_x) / ((retr_distance_steps*2)+1)) %}
    
        {% set start_retr_x = start_corner_x + (stepping_division_size_x * stepping_x) %}
        {% set end_retr_x = start_corner_x + (stepping_division_size_x * (stepping_x+1)) %}

        # cocoa press extruder volume per mm travel
        # 0.0152916
        
        {% set extrusion_amt = 0.0125639586 * (end_retr_x - start_retr_x) %}
        G1 X{start_retr_x} Y{start_retr_y} F500
        G1 X{end_retr_x} Y{start_retr_y} E{extrusion_amt} F150  #250mm/min -> 4.16mm/s.  may be a bit much.  will find out LOL.

        #G1 E-{} F
      
        {action_respond_info("Y-Start: {} X-Start: {} X-End: {}".format(start_retr_y, start_retr_x, end_retr_x))} 
      {% endfor %}
      
    {% endfor %}

    # semi complete test retraction distance.
    
    
  {% endif %} # end coreXY check.